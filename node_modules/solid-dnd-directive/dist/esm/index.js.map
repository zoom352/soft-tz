{"version":3,"file":"index.js","sources":["../../src/util/flip.ts","../../src/index.ts"],"sourcesContent":["export type Flipper = {\n    read: (ids: string[]) => void;\n    flip: (ids: string[]) => void;\n}\nexport function createFlipper(node: HTMLElement, durationMS: number): Flipper {\n    let idToRect = new Map();\n    let idToAnim = new Map();\n\n    function read(ids: string[]) {\n        idToRect = new Map();\n        Array.from(node.children).forEach((child, index) => {\n            idToRect.set(ids[index], child.getBoundingClientRect());\n        });\n    }\n    function flip(ids: string[]) {\n        Array.from(node.children).forEach((child, index) => {\n            const id = ids[index];\n            const currentRect = child.getBoundingClientRect();\n            const prevRect = idToRect.get(id);\n            if (prevRect) {\n                const transformX = prevRect.left - currentRect.left;\n                const transformY = prevRect.top - currentRect.top;\n                if (transformX || transformY) {\n                    const keyFrames = [\n                        {transform: `translate3d(${transformX}px, ${transformY}px, 0)`},\n                        {transform: 'translate3d(0, 0, 0)'}\n                    ];\n                    const animationObj = child.animate(keyFrames, {duration: durationMS, easing: \"ease-out\"});\n                    idToAnim.set(id, animationObj);\n                    animationObj.onfinish = () => idToAnim.delete(id);\n                    animationObj.oncancel = () => idToAnim.delete(id);\n                }\n            }\n        });\n    }\n\n    return {read, flip};\n}\n","import { dndzone as dndActionZone, setDebugMode, overrideItemIdKeyNameBeforeInitialisingDndZones as overrideId, Options } from \"svelte-dnd-action\";\nimport {createEffect, createRenderEffect, onMount, onCleanup} from \"solid-js\";\nimport {createFlipper, Flipper} from \"./util/flip\";\nexport {\n    TRIGGERS,\n    SOURCES,\n    SHADOW_ITEM_MARKER_PROPERTY_NAME,\n    SHADOW_PLACEHOLDER_ITEM_ID,\n    DRAGGED_ELEMENT_ID,\n    alertToScreenReader,\n    setDebugMode\n} from \"svelte-dnd-action\";\n\nconst DEFAULT_FLIP_DURATION_MS = 150;\nlet ID_KEY = \"id\";\nexport function overrideItemIdKeyNameBeforeInitialisingDndZones(newId:string) {\n    overrideId(newId);\n    ID_KEY = newId;\n}\n\ntype SolidOptions = {\n    items: () => Array<Record<string, any>>; /**a getter the list of items (SIGNAL or a getter to STORE value) that was used to generate the children of the given node (the list used in the `<For>` block*/\n    type?: string | (() => string); /**the type of the dnd zone. children dragged from here can only be dropped in other zones of the same type, default to a base type*/\n    flipDurationMs?: number | (() => number); /**the duration of the flip animation. zero means no animation*/\n    dragDisabled?: boolean | (() => boolean);\n    morphDisabled?: boolean | (() => boolean); /**whether dragged element should morph to zone dimensions*/\n    dropFromOthersDisabled?: boolean | (() => boolean);\n    zoneTabIndex?: number | (() => number); /**set the tabindex of the list container when not dragging*/\n    dropTargetStyle?: Record<string, string> | (() => Record<string, string>);\n    dropTargetClasses?: string[] | (() => string[]);\n};\n\nexport function dndzone(node: HTMLElement, optionsGetter: () => SolidOptions) {\n    const options = optionsGetter();\n    validateOptions(options);\n    const optionsAsGetters = addDefaultOptions(optionsToGetters(options));\n    const {flipDurationMs: getFlipDurationMs} = optionsAsGetters;\n    const getItems = optionsAsGetters.items as () => Array<Record<string, any>>;\n    let flipper: (Flipper | undefined) = undefined;\n\n    onMount(() => {\n        const {update, destroy} = dndActionZone(node, gettersToOptions(optionsAsGetters));\n        onCleanup(destroy);\n        createEffect(function updateOptionsAndTriggerFlip() {\n            update(gettersToOptions(optionsAsGetters));\n            flipper?.flip(getItems().map(item => item[ID_KEY]));\n        });\n    });\n    createEffect(function updateFlipperWhenFipDurationChanges() {\n        flipper = createFlipper(node, getFlipDurationMs())\n    })\n    createRenderEffect(function storeFlipInformation() {\n        function adaptConsider() {\n            flipper?.read(getItems().map(item => item[ID_KEY]));\n        }\n        function adaptFinalize() {\n            flipper?.read(getItems().map(item => item[ID_KEY]));\n        }\n        node.addEventListener('consider', adaptConsider);\n        node.addEventListener('finalize', adaptFinalize);\n        onCleanup(() => {\n            node.removeEventListener('consider', adaptConsider);\n            node.removeEventListener('finalize', adaptFinalize)\n        })\n    });\n}\n\n/* Helper functions */\nfunction makeGetter(option: any) {\n    return (typeof option === \"function\") ? option : () => option;\n}\n\n/**\n * Converts an object with either getters or values to an object of getters so that all of the element can be treated the same\n */\nfunction optionsToGetters(options: Record<string, any>) {\n    return Object.keys(options).reduce((res:Record<string, any>, optName) => {res[optName] = makeGetter(options[optName]); return res;}, {}) as Record<string, () => any>;\n}\nfunction validateOptions(options: SolidOptions) {\n    if(typeof options.items !== \"function\") {\n        throw new Error(`dndzone didn't get an items getter, which is a mandatory option in ${JSON.stringify(options)}`);\n    }\n}\nfunction addDefaultOptions(optionGetters: Record<string, () => any>) {\n    if (typeof optionGetters.flipDurationMs !== \"function\") {\n        return {...optionGetters, flipDurationMs: () => DEFAULT_FLIP_DURATION_MS}\n    }\n    return  optionGetters;\n}\n\n/**\n * Calls each getter and maps it to its value (so it can be given to the lib\n */\nfunction gettersToOptions(optionGetters: Record<string, () => any>) : Options {\n    return Object.keys(optionGetters).reduce((res:Record<string, any>, optName) => {res[optName] = optionGetters[optName](); return res;}, {}) as Options;\n}\n"],"names":["createFlipper","node","durationMS","idToRect","Map","idToAnim","read","ids","Array","from","children","forEach","child","index","set","getBoundingClientRect","flip","id","currentRect","prevRect","get","transformX","left","transformY","top","keyFrames","transform","animationObj","animate","duration","easing","onfinish","delete","oncancel","DEFAULT_FLIP_DURATION_MS","ID_KEY","overrideItemIdKeyNameBeforeInitialisingDndZones","newId","overrideId","dndzone","optionsGetter","options","validateOptions","optionsAsGetters","addDefaultOptions","optionsToGetters","flipDurationMs","getFlipDurationMs","getItems","items","flipper","undefined","onMount","update","destroy","dndActionZone","gettersToOptions","onCleanup","createEffect","updateOptionsAndTriggerFlip","map","item","updateFlipperWhenFipDurationChanges","createRenderEffect","storeFlipInformation","adaptConsider","adaptFinalize","addEventListener","removeEventListener","makeGetter","option","Object","keys","reduce","res","optName","Error","JSON","stringify","optionGetters"],"mappings":"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"}