{"ast":null,"code":"var _jsxFileName = \"C:\\\\dragon-drop\\\\src\\\\App.js\";\nimport { createStore } from \"solid-js/store\";\nimport './App.css';\nimport { Board } from \"./components/board\"; // const App = () => {\n//   // const [boards, setBoards] = useState([])\n//   const [boards, setBoards] = useState([])\n//   const [currentBoard, setCurrentBoard] = useState(null)\n//   const [currentItem, setCurrentItem] = useState(null)\n//   // useEffect(async () => {\n//   //   const response = await PostService.getAll()\n//   //   const data = response.data\n//   //   setBoards(data)\n//   // }, [])\n//   console.log(boards)\n//   return (\n//     <div className='app'>\n//     </div>\n//   );\n// }\n// export default App;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App; // https://jsonplaceholder.typicode.com/posts?_limit=10\n// function dragOverHandler(e) {\n//   e.preventDefault()\n//   if(e.target.className == 'item') {\n//       e.target.style.boxShadow = '0 4px 3px gray'\n//   }\n// }\n// function dragLeaveHandler(e) {\n//   e.target.style.boxShadow = 'none'\n// }\n// function dragStartHandler (e, board, item) {\n//   setCurrentBoard(board)\n//   setCurrentItem(item)\n// }\n// function dragEndHandler(e) {\n//   e.target.style.boxShadow = 'none'\n// }\n// function dropHandler (e, board, item) {\n//   e.preventDefault()   \n//   const currentIndex = currentBoard.items.indexOf(currentItem)\n//   // currentBoard.items.splice(currentIndex, 1)\n//   const dropIndex = board.items.indexOf(item)\n//   // board.items.splice(dropIndex + 1, 0, currentItem)\n//   setBoards(boards.map(b => {\n//     if (b.id === board.id){\n//       return board\n//     }\n//     if(b.id === currentBoard.id) {\n//       return currentBoard\n//     }\n//     return b\n//   }))\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/dragon-drop/src/App.js"],"names":["createStore","Board","App"],"mappings":";AAAA,SAASA,WAAT,QAA4B,gBAA5B;AAEA,OAAO,WAAP;AACA,SAASC,KAAT,QAAsB,oBAAtB,C,CAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AAEA;;;;AAUA,SAASC,GAAT,GAAe;AAEb,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KAPQA,G;AAST,eAAeA,GAAf,C,CAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore } from \"solid-js/store\";\n\nimport './App.css';\nimport { Board } from \"./components/board\";\n\n\n\n\n// const App = () => {\n\n//   // const [boards, setBoards] = useState([])\n//   const [boards, setBoards] = useState([])\n//   const [currentBoard, setCurrentBoard] = useState(null)\n//   const [currentItem, setCurrentItem] = useState(null)\n\n//   // useEffect(async () => {\n//   //   const response = await PostService.getAll()\n//   //   const data = response.data\n//   //   setBoards(data)\n//   // }, [])\n\n\n//   console.log(boards)\n//   return (\n//     <div className='app'>\n     \n//     </div>\n\n\n\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n\nfunction App() {\n\n  return (\n    <div className='App'>\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n// https://jsonplaceholder.typicode.com/posts?_limit=10\n\n\n\n// function dragOverHandler(e) {\n//   e.preventDefault()\n//   if(e.target.className == 'item') {\n//       e.target.style.boxShadow = '0 4px 3px gray'\n//   }\n// }\n\n// function dragLeaveHandler(e) {\n//   e.target.style.boxShadow = 'none'\n// }\n\n// function dragStartHandler (e, board, item) {\n//   setCurrentBoard(board)\n//   setCurrentItem(item)\n// }\n\n// function dragEndHandler(e) {\n//   e.target.style.boxShadow = 'none'\n// }\n\n// function dropHandler (e, board, item) {\n//   e.preventDefault()   \n//   const currentIndex = currentBoard.items.indexOf(currentItem)\n//   // currentBoard.items.splice(currentIndex, 1)\n//   const dropIndex = board.items.indexOf(item)\n//   // board.items.splice(dropIndex + 1, 0, currentItem)\n//   setBoards(boards.map(b => {\n//     if (b.id === board.id){\n//       return board\n//     }\n//     if(b.id === currentBoard.id) {\n//       return currentBoard\n//     }\n//     return b\n//   }))\n// }"]},"metadata":{},"sourceType":"module"}