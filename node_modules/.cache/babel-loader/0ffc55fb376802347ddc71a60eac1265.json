{"ast":null,"code":"import { overrideItemIdKeyNameBeforeInitialisingDndZones as overrideItemIdKeyNameBeforeInitialisingDndZones$1, dndzone as dndzone$1 } from 'svelte-dnd-action';\nexport { DRAGGED_ELEMENT_ID, SHADOW_ITEM_MARKER_PROPERTY_NAME, SHADOW_PLACEHOLDER_ITEM_ID, SOURCES, TRIGGERS, alertToScreenReader, setDebugMode } from 'svelte-dnd-action';\nimport { onMount, onCleanup, createEffect, createRenderEffect } from 'solid-js';\n\nfunction createFlipper(node, durationMS) {\n  let idToRect = new Map();\n  let idToAnim = new Map();\n\n  function read(ids) {\n    idToRect = new Map();\n    Array.from(node.children).forEach((child, index) => {\n      idToRect.set(ids[index], child.getBoundingClientRect());\n    });\n  }\n\n  function flip(ids) {\n    Array.from(node.children).forEach((child, index) => {\n      const id = ids[index];\n      const currentRect = child.getBoundingClientRect();\n      const prevRect = idToRect.get(id);\n\n      if (prevRect) {\n        const transformX = prevRect.left - currentRect.left;\n        const transformY = prevRect.top - currentRect.top;\n\n        if (transformX || transformY) {\n          const keyFrames = [{\n            transform: `translate3d(${transformX}px, ${transformY}px, 0)`\n          }, {\n            transform: 'translate3d(0, 0, 0)'\n          }];\n          const animationObj = child.animate(keyFrames, {\n            duration: durationMS,\n            easing: \"ease-out\"\n          });\n          idToAnim.set(id, animationObj);\n\n          animationObj.onfinish = () => idToAnim.delete(id);\n\n          animationObj.oncancel = () => idToAnim.delete(id);\n        }\n      }\n    });\n  }\n\n  return {\n    read,\n    flip\n  };\n}\n\nconst DEFAULT_FLIP_DURATION_MS = 150;\nlet ID_KEY = \"id\";\n\nfunction overrideItemIdKeyNameBeforeInitialisingDndZones(newId) {\n  overrideItemIdKeyNameBeforeInitialisingDndZones$1(newId);\n  ID_KEY = newId;\n}\n\nfunction dndzone(node, optionsGetter) {\n  const options = optionsGetter();\n  validateOptions(options);\n  const optionsAsGetters = addDefaultOptions(optionsToGetters(options));\n  const {\n    flipDurationMs: getFlipDurationMs\n  } = optionsAsGetters;\n  const getItems = optionsAsGetters.items;\n  let flipper = undefined;\n  onMount(() => {\n    const {\n      update,\n      destroy\n    } = dndzone$1(node, gettersToOptions(optionsAsGetters));\n    onCleanup(destroy);\n    createEffect(function updateOptionsAndTriggerFlip() {\n      update(gettersToOptions(optionsAsGetters));\n      flipper?.flip(getItems().map(item => item[ID_KEY]));\n    });\n  });\n  createEffect(function updateFlipperWhenFipDurationChanges() {\n    flipper = createFlipper(node, getFlipDurationMs());\n  });\n  createRenderEffect(function storeFlipInformation() {\n    function adaptConsider() {\n      flipper?.read(getItems().map(item => item[ID_KEY]));\n    }\n\n    function adaptFinalize() {\n      flipper?.read(getItems().map(item => item[ID_KEY]));\n    }\n\n    node.addEventListener('consider', adaptConsider);\n    node.addEventListener('finalize', adaptFinalize);\n    onCleanup(() => {\n      node.removeEventListener('consider', adaptConsider);\n      node.removeEventListener('finalize', adaptFinalize);\n    });\n  });\n}\n/* Helper functions */\n\n\nfunction makeGetter(option) {\n  return typeof option === \"function\" ? option : () => option;\n}\n/**\n * Converts an object with either getters or values to an object of getters so that all of the element can be treated the same\n */\n\n\nfunction optionsToGetters(options) {\n  return Object.keys(options).reduce((res, optName) => {\n    res[optName] = makeGetter(options[optName]);\n    return res;\n  }, {});\n}\n\nfunction validateOptions(options) {\n  if (typeof options.items !== \"function\") {\n    throw new Error(`dndzone didn't get an items getter, which is a mandatory option in ${JSON.stringify(options)}`);\n  }\n}\n\nfunction addDefaultOptions(optionGetters) {\n  if (typeof optionGetters.flipDurationMs !== \"function\") {\n    return { ...optionGetters,\n      flipDurationMs: () => DEFAULT_FLIP_DURATION_MS\n    };\n  }\n\n  return optionGetters;\n}\n/**\n * Calls each getter and maps it to its value (so it can be given to the lib\n */\n\n\nfunction gettersToOptions(optionGetters) {\n  return Object.keys(optionGetters).reduce((res, optName) => {\n    res[optName] = optionGetters[optName]();\n    return res;\n  }, {});\n}\n\nexport { dndzone, overrideItemIdKeyNameBeforeInitialisingDndZones };","map":{"version":3,"sources":["../../src/util/flip.ts","../../src/index.ts"],"names":["idToRect","idToAnim","Array","node","ids","child","id","currentRect","prevRect","transformX","transformY","keyFrames","transform","animationObj","duration","easing","flip","DEFAULT_FLIP_DURATION_MS","ID_KEY","overrideId","options","optionsGetter","validateOptions","optionsAsGetters","addDefaultOptions","optionsToGetters","flipDurationMs","getFlipDurationMs","getItems","flipper","onMount","destroy","dndActionZone","gettersToOptions","onCleanup","createEffect","update","item","createFlipper","createRenderEffect","res","makeGetter","JSON","optionGetters"],"mappings":"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","sourcesContent":["export type Flipper = {\n    read: (ids: string[]) => void;\n    flip: (ids: string[]) => void;\n}\nexport function createFlipper(node: HTMLElement, durationMS: number): Flipper {\n    let idToRect = new Map();\n    let idToAnim = new Map();\n\n    function read(ids: string[]) {\n        idToRect = new Map();\n        Array.from(node.children).forEach((child, index) => {\n            idToRect.set(ids[index], child.getBoundingClientRect());\n        });\n    }\n    function flip(ids: string[]) {\n        Array.from(node.children).forEach((child, index) => {\n            const id = ids[index];\n            const currentRect = child.getBoundingClientRect();\n            const prevRect = idToRect.get(id);\n            if (prevRect) {\n                const transformX = prevRect.left - currentRect.left;\n                const transformY = prevRect.top - currentRect.top;\n                if (transformX || transformY) {\n                    const keyFrames = [\n                        {transform: `translate3d(${transformX}px, ${transformY}px, 0)`},\n                        {transform: 'translate3d(0, 0, 0)'}\n                    ];\n                    const animationObj = child.animate(keyFrames, {duration: durationMS, easing: \"ease-out\"});\n                    idToAnim.set(id, animationObj);\n                    animationObj.onfinish = () => idToAnim.delete(id);\n                    animationObj.oncancel = () => idToAnim.delete(id);\n                }\n            }\n        });\n    }\n\n    return {read, flip};\n}\n","import { dndzone as dndActionZone, setDebugMode, overrideItemIdKeyNameBeforeInitialisingDndZones as overrideId, Options } from \"svelte-dnd-action\";\nimport {createEffect, createRenderEffect, onMount, onCleanup} from \"solid-js\";\nimport {createFlipper, Flipper} from \"./util/flip\";\nexport {\n    TRIGGERS,\n    SOURCES,\n    SHADOW_ITEM_MARKER_PROPERTY_NAME,\n    SHADOW_PLACEHOLDER_ITEM_ID,\n    DRAGGED_ELEMENT_ID,\n    alertToScreenReader,\n    setDebugMode\n} from \"svelte-dnd-action\";\n\nconst DEFAULT_FLIP_DURATION_MS = 150;\nlet ID_KEY = \"id\";\nexport function overrideItemIdKeyNameBeforeInitialisingDndZones(newId:string) {\n    overrideId(newId);\n    ID_KEY = newId;\n}\n\ntype SolidOptions = {\n    items: () => Array<Record<string, any>>; /**a getter the list of items (SIGNAL or a getter to STORE value) that was used to generate the children of the given node (the list used in the `<For>` block*/\n    type?: string | (() => string); /**the type of the dnd zone. children dragged from here can only be dropped in other zones of the same type, default to a base type*/\n    flipDurationMs?: number | (() => number); /**the duration of the flip animation. zero means no animation*/\n    dragDisabled?: boolean | (() => boolean);\n    morphDisabled?: boolean | (() => boolean); /**whether dragged element should morph to zone dimensions*/\n    dropFromOthersDisabled?: boolean | (() => boolean);\n    zoneTabIndex?: number | (() => number); /**set the tabindex of the list container when not dragging*/\n    dropTargetStyle?: Record<string, string> | (() => Record<string, string>);\n    dropTargetClasses?: string[] | (() => string[]);\n};\n\nexport function dndzone(node: HTMLElement, optionsGetter: () => SolidOptions) {\n    const options = optionsGetter();\n    validateOptions(options);\n    const optionsAsGetters = addDefaultOptions(optionsToGetters(options));\n    const {flipDurationMs: getFlipDurationMs} = optionsAsGetters;\n    const getItems = optionsAsGetters.items as () => Array<Record<string, any>>;\n    let flipper: (Flipper | undefined) = undefined;\n\n    onMount(() => {\n        const {update, destroy} = dndActionZone(node, gettersToOptions(optionsAsGetters));\n        onCleanup(destroy);\n        createEffect(function updateOptionsAndTriggerFlip() {\n            update(gettersToOptions(optionsAsGetters));\n            flipper?.flip(getItems().map(item => item[ID_KEY]));\n        });\n    });\n    createEffect(function updateFlipperWhenFipDurationChanges() {\n        flipper = createFlipper(node, getFlipDurationMs())\n    })\n    createRenderEffect(function storeFlipInformation() {\n        function adaptConsider() {\n            flipper?.read(getItems().map(item => item[ID_KEY]));\n        }\n        function adaptFinalize() {\n            flipper?.read(getItems().map(item => item[ID_KEY]));\n        }\n        node.addEventListener('consider', adaptConsider);\n        node.addEventListener('finalize', adaptFinalize);\n        onCleanup(() => {\n            node.removeEventListener('consider', adaptConsider);\n            node.removeEventListener('finalize', adaptFinalize)\n        })\n    });\n}\n\n/* Helper functions */\nfunction makeGetter(option: any) {\n    return (typeof option === \"function\") ? option : () => option;\n}\n\n/**\n * Converts an object with either getters or values to an object of getters so that all of the element can be treated the same\n */\nfunction optionsToGetters(options: Record<string, any>) {\n    return Object.keys(options).reduce((res:Record<string, any>, optName) => {res[optName] = makeGetter(options[optName]); return res;}, {}) as Record<string, () => any>;\n}\nfunction validateOptions(options: SolidOptions) {\n    if(typeof options.items !== \"function\") {\n        throw new Error(`dndzone didn't get an items getter, which is a mandatory option in ${JSON.stringify(options)}`);\n    }\n}\nfunction addDefaultOptions(optionGetters: Record<string, () => any>) {\n    if (typeof optionGetters.flipDurationMs !== \"function\") {\n        return {...optionGetters, flipDurationMs: () => DEFAULT_FLIP_DURATION_MS}\n    }\n    return  optionGetters;\n}\n\n/**\n * Calls each getter and maps it to its value (so it can be given to the lib\n */\nfunction gettersToOptions(optionGetters: Record<string, () => any>) : Options {\n    return Object.keys(optionGetters).reduce((res:Record<string, any>, optName) => {res[optName] = optionGetters[optName](); return res;}, {}) as Options;\n}\n"]},"metadata":{},"sourceType":"module"}