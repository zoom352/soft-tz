{"ast":null,"code":"var _jsxFileName = \"C:\\\\dragon-drop\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useRef, useCallback, useState } from 'react';\nimport { useDndZone } from \"react-dnd-action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const listRef = useRef();\n  const [items, setItems] = useState([{\n    id: \"item1\",\n    title: '1'\n  }, {\n    id: \"item2\",\n    title: '2'\n  }, {\n    id: \"item3\",\n    title: '3'\n  }, {\n    id: \"item3\",\n    title: '3'\n  }, {\n    id: \"item3\",\n    title: '3'\n  }]);\n  const handleSort = useCallback(function (_ref) {\n    let {\n      items,\n      info\n    } = _ref;\n    console.log(\"sort handler got\", {\n      items,\n      info\n    });\n    setItems(items);\n  }, []);\n  useDndZone(listRef, {\n    items\n  }, handleSort);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        ref: listRef,\n        children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item.title\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 32\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"J/x8UXYP0u5TRBfVtQFzKqeTOfo=\", false, function () {\n  return [useDndZone];\n});\n\n_c = App;\nexport default App; // https://jsonplaceholder.typicode.com/posts?_limit=10\n// function dragOverHandler(e) {\n//   e.preventDefault()\n//   if(e.target.className == 'item') {\n//       e.target.style.boxShadow = '0 4px 3px gray'\n//   }\n// }\n// function dragLeaveHandler(e) {\n//   e.target.style.boxShadow = 'none'\n// }\n// function dragStartHandler (e, board, item) {\n//   setCurrentBoard(board)\n//   setCurrentItem(item)\n// }\n// function dragEndHandler(e) {\n//   e.target.style.boxShadow = 'none'\n// }\n// function dropHandler (e, board, item) {\n//   e.preventDefault()   \n//   const currentIndex = currentBoard.items.indexOf(currentItem)\n//   // currentBoard.items.splice(currentIndex, 1)\n//   const dropIndex = board.items.indexOf(item)\n//   // board.items.splice(dropIndex + 1, 0, currentItem)\n//   setBoards(boards.map(b => {\n//     if (b.id === board.id){\n//       return board\n//     }\n//     if(b.id === currentBoard.id) {\n//       return currentBoard\n//     }\n//     return b\n//   }))\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/dragon-drop/src/App.js"],"names":["React","useRef","useCallback","useState","useDndZone","App","listRef","items","setItems","id","title","handleSort","info","console","log","map","item"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,WAAvB,EAAoCC,QAApC,QAAmD,OAAnD;AACA,SAAQC,UAAR,QAAyB,kBAAzB;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,OAAO,GAAGL,MAAM,EAAtB;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CACjC;AAACM,IAAAA,EAAE,EAAE,OAAL;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADiC,EAEjC;AAACD,IAAAA,EAAE,EAAE,OAAL;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAFiC,EAGjC;AAACD,IAAAA,EAAE,EAAE,OAAL;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAHiC,EAIjC;AAACD,IAAAA,EAAE,EAAE,OAAL;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAJiC,EAKjC;AAACD,IAAAA,EAAE,EAAE,OAAL;AAAcC,IAAAA,KAAK,EAAE;AAArB,GALiC,CAAD,CAAlC;AAOA,QAAMC,UAAU,GAAGT,WAAW,CAAC,gBAAyB;AAAA,QAAf;AAACK,MAAAA,KAAD;AAAQK,MAAAA;AAAR,KAAe;AACtDC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC;AAACP,MAAAA,KAAD;AAAQK,MAAAA;AAAR,KAAhC;AACAJ,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAKAH,EAAAA,UAAU,CAACE,OAAD,EAAU;AAACC,IAAAA;AAAD,GAAV,EAAmBI,UAAnB,CAAV;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE;AAAI,QAAA,GAAG,EAAEL,OAAT;AAAA,kBACGC,KAAK,CAACQ,GAAN,CAAUC,IAAI,iBAAI;AAAA,oBAAmBA,IAAI,CAACN;AAAxB,WAASM,IAAI,CAACP,EAAd;AAAA;AAAA;AAAA;AAAA,gBAAlB;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AASD;;GAzBQJ,G;UAcPD,U;;;KAdOC,G;AA2BT,eAAeA,GAAf,C,CAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import './App.css';\nimport React, {useRef, useCallback, useState} from 'react';\nimport {useDndZone} from \"react-dnd-action\";\n\n\n\nfunction App() {\n  const listRef = useRef();\n  const [items, setItems] = useState([\n    {id: \"item1\",  title: '1'},\n    {id: \"item2\",  title: '2'},\n    {id: \"item3\", title: '3'},\n    {id: \"item3\", title: '3'},\n    {id: \"item3\", title: '3'},\n  ]);\n  const handleSort = useCallback(function ({items, info}) {\n    console.log(\"sort handler got\", {items, info});\n    setItems(items);\n  }, []);\n\n  useDndZone(listRef, {items}, handleSort);\n\n  return (\n      <div className=\"App\">\n        <div className='test'>\n          <ul ref={listRef}>\n            {items.map(item => <li key={item.id}>{item.title}</li>)}\n          </ul>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n// https://jsonplaceholder.typicode.com/posts?_limit=10\n\n\n\n// function dragOverHandler(e) {\n//   e.preventDefault()\n//   if(e.target.className == 'item') {\n//       e.target.style.boxShadow = '0 4px 3px gray'\n//   }\n// }\n\n// function dragLeaveHandler(e) {\n//   e.target.style.boxShadow = 'none'\n// }\n\n// function dragStartHandler (e, board, item) {\n//   setCurrentBoard(board)\n//   setCurrentItem(item)\n// }\n\n// function dragEndHandler(e) {\n//   e.target.style.boxShadow = 'none'\n// }\n\n// function dropHandler (e, board, item) {\n//   e.preventDefault()   \n//   const currentIndex = currentBoard.items.indexOf(currentItem)\n//   // currentBoard.items.splice(currentIndex, 1)\n//   const dropIndex = board.items.indexOf(item)\n//   // board.items.splice(dropIndex + 1, 0, currentItem)\n//   setBoards(boards.map(b => {\n//     if (b.id === board.id){\n//       return board\n//     }\n//     if(b.id === currentBoard.id) {\n//       return currentBoard\n//     }\n//     return b\n//   }))\n// }"]},"metadata":{},"sourceType":"module"}